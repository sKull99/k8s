---
- hosts: all
  become: true
  tasks:
  - debug: var=ansible_eth1.ipv4.address
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present
  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
      state: present
  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce 
      - docker-ce-cli 
      - containerd.io
    notify:
      - docker status
  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker
  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none
  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0
  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present
  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list
  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet 
        - kubeadm 
        - kubectl
  - name: Add IP node in /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    lineinfile:
      path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      regexp: "EnvironmentFile=-/etc/default/kubelet"
      line: 'Environment="KUBELET_EXTRA_ARGS=--node-ip={{ ansible_eth1.ipv4.address }}"'
  - name: Reload services systemctl
    command: systemctl daemon-reload
  - name: Check is running kubelet
    command: systemctl status kubelet
    register: kubelet_is_up
    ignore_errors: True
  - name: Restarted kubelet
    command: systemctl restart kubelet
    when: kubelet_is_up is succeeded
  - name: Check if cluster is operational
    command: kubectl get nodes
    become: yes
    become_user: vagrant
    register: kube_is_up
    ignore_errors: True
  - name: Reset the Kubernetes cluster using kubeadm
    command: kubeadm reset -f
    when: kube_is_up is failed
    ignore_errors: True
  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --apiserver-advertise-address="192.168.50.10" --apiserver-cert-extra-sans="192.168.50.10" --node-name k8s-master --pod-network-cidr="172.16.0.0/16"
    when: kube_is_up is failed
  - name: Setup kubeconfig for vagrant user
    command: "{{ item }}"
    with_items:
     - mkdir -p /home/vagrant/.kube /root/.kube
     - cp -a /etc/kubernetes/admin.conf /root/.kube/config
     - cp -a /etc/kubernetes/admin.conf /home/vagrant/.kube/config
     - chown vagrant:vagrant /home/vagrant/.kube/config
  - name: Set Iptables | Sysctl
    shell: |
      echo "net.bridge.bridge-nf-call-iptables=1" >> /etc/sysctl.conf
      echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
      sysctl -p
  - name: Execution rbac-kdd.yaml | Networking v3.3
    command: kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml
  - name: Execution 1.7/calico.yaml | v3.3
    shell: |
      wget https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml -O calico.yaml
      sed -i "s/192.168.0.0/'"172.16.0.0/16"'/g" calico.yaml
      kubectl apply -f calico.yaml
  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command
  - name: Copy join command to local file
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="/tmp/k8s-join-command.sh"
    become: false
  handlers:
    - name: docker status
      service: name=docker state=started
